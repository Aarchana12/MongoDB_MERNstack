{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HomeUser\\\\Documents\\\\complaints\\\\src\\\\pages\\\\NotificationOffcanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationOffcanvas = ({\n  isOpen,\n  onClose,\n  userId\n}) => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    if (isOpen && userId) {\n      // Fetch notifications based on userId (replace with your API call)\n      const fetchNotifications = async () => {\n        try {\n          // Example API call (replace with your actual API)\n          const response = await fetch(`http://localhost:5000/api/notifications?userId=${userId}`);\n          const data = await response.json();\n          setNotifications(data);\n        } catch (error) {\n          console.error('Error fetching notifications:', error);\n        }\n      };\n      fetchNotifications();\n    }\n  }, [isOpen, userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `fixed top-0 right-0 w-64 bg-gray-800 text-white shadow-lg transition-transform transform ${isOpen ? 'translate-x-0' : 'translate-x-full'} h-full`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"absolute top-2 right-2 text-gray-400 hover:text-white transition\",\n      onClick: onClose,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-2xl\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"p-4 text-lg font-bold border-b border-gray-700\",\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"divide-y divide-gray-700\",\n      children: notifications.length > 0 ? notifications.map(notification => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"p-3 hover:bg-gray-700 transition rounded\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: notification.url,\n          className: \"block text-gray-300 hover:text-white\",\n          children: notification.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 29\n        }, this)\n      }, notification.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"p-3 text-center\",\n        children: \"No notifications\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(NotificationOffcanvas, \"6gMUc0OfbF4zJu51/S5RmKCczuA=\");\n_c = NotificationOffcanvas;\nexport default NotificationOffcanvas;\nvar _c;\n$RefreshReg$(_c, \"NotificationOffcanvas\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","NotificationOffcanvas","isOpen","onClose","userId","_s","notifications","setNotifications","fetchNotifications","response","fetch","data","json","error","console","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","map","notification","href","url","message","id","_c","$RefreshReg$"],"sources":["C:/Users/HomeUser/Documents/complaints/src/pages/NotificationOffcanvas.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst NotificationOffcanvas = ({ isOpen, onClose, userId }) => {\r\n    const [notifications, setNotifications] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (isOpen && userId) {\r\n            // Fetch notifications based on userId (replace with your API call)\r\n            const fetchNotifications = async () => {\r\n                try {\r\n                    // Example API call (replace with your actual API)\r\n                    const response = await fetch(`http://localhost:5000/api/notifications?userId=${userId}`);\r\n                    const data = await response.json();\r\n                    setNotifications(data);\r\n                } catch (error) {\r\n                    console.error('Error fetching notifications:', error);\r\n                }\r\n            };\r\n\r\n            fetchNotifications();\r\n        }\r\n    }, [isOpen, userId]);\r\n\r\n    return (\r\n        <div className={`fixed top-0 right-0 w-64 bg-gray-800 text-white shadow-lg transition-transform transform ${isOpen ? 'translate-x-0' : 'translate-x-full'} h-full`}>\r\n            <button className=\"absolute top-2 right-2 text-gray-400 hover:text-white transition\" onClick={onClose}>\r\n                <span className=\"text-2xl\">&times;</span>\r\n            </button>\r\n            <h2 className=\"p-4 text-lg font-bold border-b border-gray-700\">Notifications</h2>\r\n            <ul className=\"divide-y divide-gray-700\">\r\n                {notifications.length > 0 ? (\r\n                    notifications.map((notification) => (\r\n                        <li key={notification.id} className=\"p-3 hover:bg-gray-700 transition rounded\">\r\n                            <a href={notification.url} className=\"block text-gray-300 hover:text-white\">\r\n                                {notification.message}\r\n                            </a>\r\n                        </li>\r\n                    ))\r\n                ) : (\r\n                    <li className=\"p-3 text-center\">No notifications</li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotificationOffcanvas;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,qBAAqB,GAAGA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC3D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACZ,IAAIK,MAAM,IAAIE,MAAM,EAAE;MAClB;MACA,MAAMI,kBAAkB,GAAG,MAAAA,CAAA,KAAY;QACnC,IAAI;UACA;UACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kDAAkDN,MAAM,EAAE,CAAC;UACxF,MAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;UAClCL,gBAAgB,CAACI,IAAI,CAAC;QAC1B,CAAC,CAAC,OAAOE,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACzD;MACJ,CAAC;MAEDL,kBAAkB,CAAC,CAAC;IACxB;EACJ,CAAC,EAAE,CAACN,MAAM,EAAEE,MAAM,CAAC,CAAC;EAEpB,oBACIJ,OAAA;IAAKe,SAAS,EAAE,4FAA4Fb,MAAM,GAAG,eAAe,GAAG,kBAAkB,SAAU;IAAAc,QAAA,gBAC/JhB,OAAA;MAAQe,SAAS,EAAC,kEAAkE;MAACE,OAAO,EAAEd,OAAQ;MAAAa,QAAA,eAClGhB,OAAA;QAAMe,SAAS,EAAC,UAAU;QAAAC,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,eACTrB,OAAA;MAAIe,SAAS,EAAC,gDAAgD;MAAAC,QAAA,EAAC;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjFrB,OAAA;MAAIe,SAAS,EAAC,0BAA0B;MAAAC,QAAA,EACnCV,aAAa,CAACgB,MAAM,GAAG,CAAC,GACrBhB,aAAa,CAACiB,GAAG,CAAEC,YAAY,iBAC3BxB,OAAA;QAA0Be,SAAS,EAAC,0CAA0C;QAAAC,QAAA,eAC1EhB,OAAA;UAAGyB,IAAI,EAAED,YAAY,CAACE,GAAI;UAACX,SAAS,EAAC,sCAAsC;UAAAC,QAAA,EACtEQ,YAAY,CAACG;QAAO;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB;MAAC,GAHCG,YAAY,CAACI,EAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIpB,CACP,CAAC,gBAEFrB,OAAA;QAAIe,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IACvD;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAAChB,EAAA,CA1CIJ,qBAAqB;AAAA4B,EAAA,GAArB5B,qBAAqB;AA4C3B,eAAeA,qBAAqB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}